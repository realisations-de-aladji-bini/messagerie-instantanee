const app = require('../app')
const request = require('supertest')

test('Test if user can log in and create a group', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .post('/api/mygroups')
    .set('x-access-token', response.body.token)
    .send({name:'Football'})
  expect(response.statusCode).toBe(200)
  expect(response.body.message).toBe('Group Created')
})

test('Test if user can log in and try create a group without name', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .post('/api/mygroups')
    .set('x-access-token', response.body.token)
    .send({})
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('You must specify a group name')
})

test('Test if user can log in and list the groups he is admin', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .get('/api/mygroups')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(200)
  expect(response.body.message).toBe('Returning groups admin')
  expect(response.body.data.length).toBeGreaterThan(0)
})

test('Test if user can log in and remove a member from a group he is admin', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .delete('/api/mygroups/1/2')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(200)
  expect(response.body.message).toBe('User removed')
})

test('Test if user can log in try to remove an user who does not exist from a group he is admin', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .delete('/api/mygroups/1/9')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('User does not exist')
})

test('Test if user can log in try to remove a member from a group that doesnt exist', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .delete('/api/mygroups/9/3')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('Group does not exist')
})

test('Test if user can log in and add a member from a group he is admin', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/mygroups/1/3')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(200)
  expect(response.body.message).toBe('User Added')
})


test('Test if user can log in and list the groups he is member of', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .get('/api/groupsmember')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(200)
  expect(response.body.message).toBe('Returning groups membership')
  expect(response.body.data.length).toBeGreaterThan(0)
})

test('Test if user can log in try to add an user who does not exist from a group he is admin', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/mygroups/1/9')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('User does not exist')
})

test('Test if user can log in try to add a member whitout id', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/mygroups/2/')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(404)
  expect(response.body.message).toBe('Endpoint Not Found')
})

test('Test if user can log in try to add a member from a group that doesnt exist', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/mygroups/9/3')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('Group does not exist')
})

test('Test if user can log in and list members of a specified group', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .get('/api/mygroups/1')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(200)
  expect(response.body.message).toBe('Returning groups members')
  expect(response.body.data.length).toBeGreaterThan(0)
})





